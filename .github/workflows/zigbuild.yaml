name: zigbuild
on:
  workflow_dispatch: # for manual debugging
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+"

jobs:
  publish:
    strategy:
      fail-fast: false # to see what builds/what fails
      matrix:
        include:
          # each `target` is picked from `rustup target list` and each
          # `vscode-target` is drawn from `vsce publish --help`
          # x86 windows
          # - os: windows-latest
          #   target: x86_64-pc-windows-msvc
          #   vscode-target: win32-x64
          # x86 linux
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            vscode-target: linux-x64
          # TODO: arm64 linux
          # x86 macos
          - os: macos-latest
            target: x86_64-apple-darwin
            vscode-target: darwin-x64x
          # arm64 macos
          # FIXME: the host is still x86_64; need to install aarch64-apple-darwin binutils
          # - os: macos-latest
          #   target: aarch64-apple-darwin
          #   vscode-target: darwin-arm64

    name: Build (${{ matrix.target }})
    runs-on: ${{ matrix.os }}
    steps:
      - name: cache built binary for ${{ matrix.target }}
        uses: actions/cache@v2
        id: cache-bin
        with:
          path: ./target/${{ matrix.target }}/release/base_language_server
          key: "built-artifact-${{ matrix.target }}-${{ hashFiles('./pkg/base/**', './Cargo.*') }}"
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # shallow clone for speed
      - uses: pnpm/action-setup@v2 # see https://github.com/pnpm/action-setup
        if: steps.cache-bin.outputs.cache-hit != 'true'
        with:
          version: 8
      - uses: actions/setup-node@v3 # see https://github.com/actions/setup-node/
        if: steps.cache-bin.outputs.cache-hit != 'true'
        with:
          node-version: 18
          cache: "pnpm"
          cache-dependency-path: |
            ./editors/code/base/pnpm-lock.yaml
            ./editors/code/pro/pnpm-lock.yaml
      - name: install @sentry/cli
        if: steps.cache-bin.outputs.cache-hit != 'true'
        shell: bash
        run: cd ./editors/code/base && pnpm install --frozen-lockfile
      - name: setup zig
        shell: bash
        if: steps.cache-bin.outputs.cache-hit != 'true'
        run: |
          python3 -m pip install ziglang cargo-zigbuild
          site_packages="$(
            python3 -c 'import sys; from pathlib import Path; [print(i) for i in sys.path if Path(i).name == "site-packages"]'
          )"
          PATH="$site_packages/ziglang:$PATH"
          PATH="${PWD}/editors/code/base/node_modules/.bin:$PATH"
          export PATH="$PATH"
          which zig
          which cargo-zigbuild
          which rustup
          which sentry-cli
          echo "PATH=$PATH" >> $GITHUB_ENV
      - name: "Install rust toolchain"
        if: steps.cache-bin.outputs.cache-hit != 'true'
        shell: bash
        run: |
          rustup toolchain install stable --profile minimal
          rustup component add rust-src
      - uses: Swatinem/rust-cache@v2 # see https://github.com/Swatinem/rust-cache
        if: steps.cache-bin.outputs.cache-hit != 'true'

      #         target: x86_64-apple-darwin
      #         target: x86_64-unknown-linux-gnu
      #         target: x86_64-pc-windows-msvc
      #         target: aarch64-apple-darwin
      - name: "Install rust toolchain including ${{ matrix.target }}"
        shell: bash
        run: |
          rustup target add ${{ matrix.target }}
      - name: "build the binary for ${{matrix.target}}}"
        shell: bash
        run: |
          target=${{ matrix.target }}
          export RUSTFLAGS="-Clink-args=-Wl,--build-id=sha1"
          export PATH="$PATH"
          echo "$PATH" | tr ':' '\n' | sed 's/^/P  /g'
          which zig
          which cargo-zigbuild
          which rustup
          which sentry-cli || stat $PWD/editors/code/base/node_modules/.bin/sentry-cli

          rustup target add "$target"
          cargo zigbuild --target $target --bin base_language_server --release --all-features
      - name: post-processing
        run: |
          target=x86_64-unknown-linux-gnu
          bin=./target/$target/release/base_language_server
          llvm-objcopy --only-keep-debug $bin $bin.debug
          cp $bin $bin.stripped
          llvm-strip --strip-debug --strip-unneeded $bin.stripped
          llvm-objcopy --add-gnu-debuglink=$bin.debug $bin.stripped
          du -hs $bin
          du -hs $bin.debug
          du -hs $bin.stripped
          sentry-cli debug-files check $bin          || true
          sentry-cli debug-files check $bin.debug    || true
          sentry-cli debug-files check $bin.stripped || true

      - name: "build the binary for x86_64-pc-windows-msvc"
        run: |
          target=x86_64-pc-windows-msvc
          export RUSTFLAGS="-Clink-args=-Wl,--build-id=sha1"
          export PATH="$PATH"
          echo "$PATH" | tr ':' '\n' | sed 's/^/P  /g'
          which zig
          which cargo-zigbuild
          which rustup
          which sentry-cli || stat $PWD/editors/code/base/node_modules/.bin/sentry-cli

          rustup target add "$target"
          cargo zigbuild --target $target --bin base_language_server --release --all-features
          du -hs ./target/$target/release/base_language_server
          sentry-cli debug-files check ./target/$target/release/base_language_server
      # - name: "build the binary for aarch64-apple-darwin"
      #   run: |
      #     target=aarch64-apple-darwin
      #     export RUSTFLAGS="-Clink-args=-Wl,--build-id=sha1"
      #     which zig
      #     which cargo-zigbuild
      #     which rustup
      #     which sentry-cli

      #     rustup target add "$target"
      #     cargo zigbuild --target $target --bin base_language_server --release --all-features
      #     du -hs ./target/$target/release/base_language_server
      #     sentry-cli debug-files check ./target/$target/release/base_language_server

    #   shell: bash
    #   run: |
    #     PATH="/usr/local/opt/binutils/bin:$PATH"
    #     PATH="$PWD/editors/code/base/node_modules/.bin:$PATH"
    #     export PATH
    #     export RUSTFLAGS="-Clink-args=-Wl,--build-id=sha1"
    #     ./scripts/build_bin.sh --version=base --profile=release --target ${{matrix.target}}

    # - name: upload ${{ matrix.target }} bin
    #   uses: actions/upload-artifact@v3
    #   with:
    #     name: cconvention-base-${{matrix.target}}
    #     path: ./target/${{matrix.target}}/release/base_language_server
    # # # TODO: check JS/TS/JSON formatting with Prettier
    # - name: cache the built JS
    #   uses: actions/cache@v3
    #   id: built-base-js
    #   with:
    #     path: ./editors/code/base/dist/main.min.common.js
    #     key: "built-js-for-${{ hashfiles('./editors/code/base/src/*.ts', './editors/code/base/pnpm-lock.yaml') }}"
    # TODO: ensure the tmLanguage.json is up-to-date with the checked-in tmlanguage
    # should be a separare workflow, I
    # - name: check the tmLanguage up-to-date
    #   shell: bash
    #   if: ...
    #   working-directory: ./editors/code/base
    #   run: |
    #     export PATH=${PWD}/node_modules/.bin:$PATH
    #     ./scripts/build_textmate.sh
    #     git --no-pager diff --exit-code -- src/tmLanguage.json
    # - name: build the JS if changed
    #   shell: bash
    #   if: steps.built-base-js.outputs.cache-hit != 'true'
    #   working-directory: ./editors/code/base
    #   run: |
    #     PATH=${PWD}/node_modules/.bin:$PATH ./scripts/build_js.sh
    # # TODO: move building the JS bundle and checking the tmLanguage to its own job?
    # # if parallelized: possible minor data-race -- should be ok due to deterministic JS-build outputs
    # - name: build the ${{ matrix.vscode-target }} vsix
    #   shell: bash
    #   run: |
    #     export PATH=${PWD}/editors/code/base/node_modules/.bin:$PATH
    #     ./scripts/build_vsix.sh --version=base --profile=release --target=${{ matrix.target }}
    # - name: upload ${{ matrix.vscode-target }} vsix
    #   uses: actions/upload-artifact@v3
    #   with:
    #     name: cconvention-${{matrix.vscode-target}}.vsix
    #     path: ./editors/code/base/dist/cconvention.${{ matrix.vscode-target }}.vsix
