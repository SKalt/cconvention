name: build2
on:
  workflow_dispatch: # for manual debugging
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+"

jobs:
  publish:
    strategy:
      fail-fast: false # to see what builds/what fails
      matrix:
        include:
          # each `target` is picked from `rustup target list` and each
          # `vscode-target` is drawn from `vsce publish --help`
          # x86 windows
          # - os: windows-latest
          #     target: x86_64-pc-windows-msvc
          #     vscode-target: win32-x64
          # x86 linux
          - os: ubuntu-latest
            native:
              target: x86_64-unknown-linux-gnu
              vscode-target: linux-x64 # todo: fully-static MUSL?
            # cross:
            #   target: aarch64-unknown-linux-gnu
            #   vscode-target: linux-arm64
          # TODO: arm64 linux
          # x86 macos
          - os: macos-latest
            native:
              target: x86_64-apple-darwin
              vscode-target: darwin-x64x
          # arm64 macos
          # FIXME: the host is still x86_64; need to install aarch64-apple-darwin binutils
          # - os: macos-latest
          #   target: aarch64-apple-darwin
          #   vscode-target: darwin-arm64

    name: Build (${{ matrix.native.target }})
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # shallow clone for speed
      - name: set MacOS SDKROOT and MACOSX_DEPLOYMENT_TARGET
        # see https://stackoverflow.com/questions/66849112/how-do-i-cross-compile-a-rust-application-from-macos-x86-to-macos-silicon
        run: |
          {
            echo "SDKROOT=$(xcrun -sdk macosx --show-sdk-path)"
            echo "MACOSX_DEPLOYMENT_TARGET=$(xcrun -sdk macosx --show-sdk-platform-version)"
          } | tee -a $GITHUB_ENV
      - name: "Install rust toolchain"
        if: steps.cache-bin.outputs.cache-hit != 'true'
        shell: bash
        run: |
          rustup toolchain install stable --profile minimal
          rustup target add ${{ matrix.native.target }}
          rustup component add rust-src
          rustup component add llvm-tools-preview # 32mb
          bins_dir="$(rustup run stable rustc --print sysroot)/lib/rustlib/${{ matrix.native.target }}/bin"
          export PATH="$bins_dir:$PATH"
          echo "PATH=$PATH" >> $GITHUB_ENV
          # pulling 3x32MB of llvm tools is still better than pushing+pulling
          # 6x60MB of the built binary
      - uses: Swatinem/rust-cache@v2 # see https://github.com/Swatinem/rust-cache
      - name: "native build: ${{matrix.native.target}}}"
        shell: bash
        run: |
          target=${{ matrix.native.target }}
          export RUSTFLAGS="-Clink-args=-Wl,--build-id=sha1"
          rust-lld --version && rust-lld --help || echo "rust-lld missing"
          ./scripts/build_bin.sh \
            --version=base       \
            --profile=release    \
            --target ${{matrix.native.target}}
      # TODO: cross build
      - name: upload ${{ matrix.native.target }} bin
        uses: actions/upload-artifact@v3
        with:
          name: cconvention-base-${{matrix.native.target}}
          path: ./target/${{matrix.native.target}}/release/base_language_server*
